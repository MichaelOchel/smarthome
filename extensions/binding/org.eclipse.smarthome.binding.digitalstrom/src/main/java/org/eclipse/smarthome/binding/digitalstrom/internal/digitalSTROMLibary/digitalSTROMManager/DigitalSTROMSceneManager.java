/**
 * Copyright (c) 2014-2015 openHAB UG (haftungsbeschraenkt) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.smarthome.binding.digitalstrom.internal.digitalSTROMLibary.digitalSTROMManager;

import java.util.List;

import org.eclipse.smarthome.binding.digitalstrom.internal.digitalSTROMLibary.digitalSTROMConfiguration.DigitalSTROMConfig;
import org.eclipse.smarthome.binding.digitalstrom.internal.digitalSTROMLibary.digitalSTROMListener.DigitalSTROMManagerStatusListener;
import org.eclipse.smarthome.binding.digitalstrom.internal.digitalSTROMLibary.digitalSTROMListener.SceneStatusListener;
import org.eclipse.smarthome.binding.digitalstrom.internal.digitalSTROMLibary.digitalSTROMStructure.digitalSTROMDevices.Device;
import org.eclipse.smarthome.binding.digitalstrom.internal.digitalSTROMLibary.digitalSTROMStructure.digitalSTROMDevices.deviceParameters.DSID;
import org.eclipse.smarthome.binding.digitalstrom.internal.digitalSTROMLibary.digitalSTROMStructure.digitalSTROMScene.InternalScene;
import org.eclipse.smarthome.binding.digitalstrom.internal.digitalSTROMLibary.digitalSTROMStructure.digitalSTROMScene.sceneEvent.EventItem;

/**
 * The {@link DigitalSTROMSceneManager} manages all functions concerning scenes without sending the commands itself.
 *
 * <p>
 * So it manages a list of all {@link InternalScenes} they called in the past or was generated by calling
 * {@link #generateScenes()}.<br>
 * Over this class you can also can register {@link SceneStatusListener}'s to the {@link InternalScene}'s or register a
 * scene discovery. You can also ignore scene calls from you with {@link #addEcho(String)} or
 * {@link #addEcho(String, short)} and update the state of an {@link InternalScene} or {@link Device} e.g. with calling
 * {@link #callInternalScene(InternalScene)}.
 * </p>
 * <p>
 * If you call the {@link #start()} method an {@link EventListener} will be started to handle scene calls and undos from
 * the
 * outside.<br>
 * NOTE: this will only works if you pull call and undo scenes forward with a script on the digitalSTROM-Server
 * and have configured the name of the raised events in {@link DigitalSTROMConfig#EVENT_NAME}.
 * </p>
 *
 *
 * @author Michael Ochel - Initial contribution
 * @author Matthias Siegele - Initial contribution
 *
 */
public interface DigitalSTROMSceneManager {

    /**
     * Handles a {@link EventItem} e.g. which was detected by the {@link EventListener}.
     *
     * @param eventItem
     */
    public void handleEvent(EventItem eventItem);

    /**
     * Activates the given {@link InternalScene} if it exists otherwise it will added to the scene list and activates it
     * then if it is a callable scene.
     *
     * @param scene
     */
    public void callInternalScene(InternalScene scene);

    /**
     * Activates a {@link InternalScene} with the given id if it exists otherwise it will be create a new
     * {@link InternalScene} and activates if it is a callable scene.
     *
     * @param sceneID
     */
    public void callInternalScene(String sceneID);

    /**
     * Call the given sceneID on the {@link Device} with the given dSID, if the {@link Device} exists.
     *
     * @param dSID
     * @param sceneID
     */
    public void callDeviceScene(DSID dSID, Short sceneID);

    /**
     * Call the given sceneID on the given {@link Device}, if the {@link Device} exists.
     *
     * @param device
     * @param sceneID
     */
    public void callDeviceScene(Device device, Short sceneID);

    /**
     * Deactivates the given {@link InternalScene} if it exists otherwise it will added to the scene list and activates
     * it
     * then if it is a callable scene.
     *
     * @param scene
     */
    public void undoInternalScene(InternalScene scene);

    /**
     * Deactivates a {@link InternalScene} with the given id if it exists otherwise it will be create a new
     * {@link InternalScene} and activates if it is a callable scene.
     *
     * @param sceneID
     */
    public void undoInternalScene(String sceneID);

    /**
     * Undo the last scene on the {@link Device} with the given dSID, if the {@link Device} exists.
     *
     * @param dSID
     */
    public void undoDeviceScene(DSID dSID);

    /**
     * Undo the last scene on the {@link Device}, if the {@link Device} exists.
     *
     * @param device
     */
    public void undoDeviceScene(Device device);

    /**
     * Registers the given {@link SceneStatusListener} to the {@link InternalScene} if it exist or registers it as a
     * scene-discovery if the id of the sceneListener is {@link SceneStatusListener#SCENE_DESCOVERY}.
     *
     * @param sceneListener
     */
    public void registerSceneListener(SceneStatusListener sceneListener);

    /**
     * Unregisters the given {@link SceneStatusListener} from the {@link InternalScene} if it exist or unregisters the
     * scene-discovery if the id of the deviceListener is {@link SceneStatusListener#SCENE_DESCOVERY}.
     *
     * @param sceneListener
     */
    public void unregisterSceneListener(SceneStatusListener sceneListener);

    /**
     * Adds the given {@link InternalScene} to the scene list if it is a callable scene.
     *
     * @param intScene
     */
    public void addInternalScene(InternalScene intScene);

    /**
     * Adds the scene call with the given dSID and sceneId as an echo to ignore them by detecting the {@link EventItem}.
     *
     * @param dsid
     * @param sceneId
     */
    public void addEcho(String dSID, short sceneId);

    /**
     * Adds the scene call with the given internal scene id as an echo to ignore them by detecting the {@link EventItem}
     * .
     *
     * @param internalSceneID
     */
    public void addEcho(String internalSceneID);

    /**
     * Returns the list of all {@link InternalScenes}.
     *
     * @return list of all scenes
     */
    public List<InternalScene> getScenes();

    /**
     * Returns true if the reachable scenes are already generated, otherwise false.
     *
     * @return true = reachable scenes generated, otherwise false
     */
    public boolean scenesGenerated();

    /**
     * Generate all reachable scenes.
     *
     */
    public void generateScenes();

    /**
     * Returns true if a discovery is registered, otherwise false.
     *
     * @return true discovery is registered, otherwise false
     */
    public boolean isDiscoveryRegistrated();

    /**
     * Starts the {@link EventListener}.<br>
     * NOTE: this will only works if you pull call and undo scenes forward with a script on the digitalSTROM-Server
     * and have configured the name of the raised events in {@link DigitalSTROMConfig#EVENT_NAME}.
     */
    public void start();

    /**
     * Stops the {@link EventListener}.
     */
    public void stop();

    /**
     * Removes the {@link InternalScene} with the given sceneID.
     *
     * @param sceneID
     */
    void removeInternalScene(String sceneID);

    /**
     * Returns the {@link InternalScene} with the given sceneID.
     *
     * @param sceneID
     * @return internal scenes
     */
    public InternalScene getInternalScene(String sceneID);

    /**
     * Registers the given {@link DigitalSTROMManagerStatusListener} to this class.
     *
     * @param statusListener
     */
    public void registerStatusListener(DigitalSTROMManagerStatusListener statusListener);

    /**
     * Unregisters the {@link DigitalSTROMManagerStatusListener} from this class.
     *
     */
    public void unregisterStatusListener();
}
